{"pageProps":{"postData":{"id":"Basic-inverse-kinematics-in-Mujoco","contentHtml":"<p>In my journey exploring the fundamentals of robot manipulation, I was curious\nabout how to perform simple inverse kinematics. I'm aware that numerous\nlibraries exist to handle this topic, but I'd like to practice translating the\nmath/pseudocode into actual implementation, particularly in MuJoCo, which\nis my primary simulator for conducting experiments at the moment. Here's what\nI discovered:</p>\n<h2 id=\"what-is-inverse-kinematics\">What is inverse kinematics</h2>\n<p>Imagine you have a six-joint robot manipulator with an end-effector, like a\ngripper, at its tip. You want to move this end-effector to a specific point in\n3D space to perform a task. To achieve this, you need to determine the exact\njoint coordinates required to position the end-effector at your desired point.\nThis is where inverse kinematics comes into play.</p>\n<p>Inverse kinematics is the process of mapping the end-effector's pose\n(position and orientation) to the joint coordinates that will achieve that pose.\nBy using inverse kinematics, you can find the specific joint angles needed to\nmove the end-effector to your desired point in 3D space.</p>\n<p><img src=\"/images/ik-diagram.svg\" alt=\"ik-diagram\"></p>\n<p>Given that there are two ways to solve inverse kinematics: the analytical\napproach and the numerical approach. The analytical approach involves using the\nmathematical model to solve for the joint angles required to achieve a desired\nend-effector pose. On the other hand, the numerical approach involves using\niterative calculations to approximate the joint angles using an optimization\nalgorithm.</p>\n<p>In this article I will focus on the numerical approaches that I found.</p>\n<h2 id=\"inverse-kinematics-algorithms\">Inverse Kinematics algorithms</h2>\n<p>While searching for the most common ways to compute inverse kinematics, I\ndiscovered the master thesis of <strong>Anton Larsson</strong> and <strong>Oskar Grönlund</strong> titled\n\"Comparative Analysis of the Inverse Kinematics of a 6-DOF Manipulator\". In\nthis thesis, they discuss the use of the Jacobian to approximate the\nrelationship between joint angles and desired end-effector position. They\nexplain three methods for doing this: <strong>Gradient Descent</strong>, <strong>Gauss-Newton</strong>,\nand <strong>Levenberg-Marquardt</strong>.</p>\n<h3 id=\"gauss-newton\">Gauss-Newton</h3>\n<p>The Gauss-Newton algorithm is a extension of a Newton's method for finding a\nminimum value of a non-linear function [1]. It starts by defining an initial\nguess <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> and estimate the next best optimal value denote by <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">x_{n+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6389em;vertical-align:-0.2083em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span></span></span></span></span>\nusing the equation (1).</p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right\" columnspacing=\"\"><mtr><mtd class=\"mtr-glue\"></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><msub><mi>x</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>x</mi><mi>n</mi></msub><mo>−</mo><mfrac><mrow><msup><mi>f</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><mrow><msup><mi>f</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow></mstyle></mtd><mtd class=\"mtr-glue\"></mtd><mtd class=\"mml-eqn-num\"></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{align}\n    x_{n+1} = x_{n} - \\frac{f^{\\prime}(x_{n})}{f^{\\prime\\prime}(x_{n})}\n\\end{align}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.6649em;vertical-align:-1.0824em;\"></span><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5824em;\"><span style=\"top:-3.5824em;\"><span class=\"pstrut\" style=\"height:3.4289em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4289em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6779em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0824em;\"><span></span></span></span></span></span></span></span><span class=\"tag\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5824em;\"><span style=\"top:-3.5824em;\"><span class=\"pstrut\" style=\"height:3.4289em;\"></span><span class=\"eqn-num\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0824em;\"><span></span></span></span></span></span></span></span></span></div>\n<p>Where <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^{\\prime}(x_{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span> represents the gradient of the cost\nfunction at the current point <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>, while <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f^{\\prime\\prime}(x_{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span> denotes\nthe second derivative of the cost function at the same point, known as the\n\"<strong>Hessian matrix</strong>\". The Hessian matrix measures how the gradient changes as the\nparameters change. This equation updates the current point <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> by moving in\na direction that minimizes the cost function, considering both the gradient and\nthe curvature of the cost function at that point. If you'd like to explore this\ntechnique further, I recommend referring to the thesis by Anton and Oskar for\nmore detailed information.</p>\n<p>The Gauss-Newton method approximates the <strong>Hessian matrix</strong> using the Jacobian\nmatrix to establish the relationship between joints and end-effector position.\nHowever, in Anton and Oskar's thesis, they utilize the pseudo-inverse of the\nJacobian matrix, as seen in equation (2), instead of the original version.</p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right\" columnspacing=\"\"><mtr><mtd class=\"mtr-glue\"></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><msup><mi>J</mi><mo lspace=\"0em\" rspace=\"0em\">†</mo></msup><mo>=</mo><mo stretchy=\"false\">(</mo><msup><mi>J</mi><mi>T</mi></msup><mi>J</mi><msup><mo stretchy=\"false\">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><msup><mi>J</mi><mi>T</mi></msup></mrow></mstyle></mtd><mtd class=\"mtr-glue\"></mtd><mtd class=\"mml-eqn-num\"></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{align}\n    J^{\\dagger} = (J^{T}J)^{-1}J^{T}\n\\end{align}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.5591em;vertical-align:-0.5296em;\"></span><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0296em;\"><span style=\"top:-3.1304em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">†</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5296em;\"><span></span></span></span></span></span></span></span><span class=\"tag\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0296em;\"><span style=\"top:-3.0296em;\"><span class=\"pstrut\" style=\"height:2.8991em;\"></span><span class=\"eqn-num\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5296em;\"><span></span></span></span></span></span></span></span></span></div>\n<p>Then the equation (1) turns to.</p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right\" columnspacing=\"\"><mtr><mtd class=\"mtr-glue\"></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><msub><mi>x</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>x</mi><mi>n</mi></msub><mo>−</mo><msup><mi>H</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi mathvariant=\"normal\">∇</mi><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>x</mi><mi>n</mi></msub><mo>−</mo><msup><mi>J</mi><mo lspace=\"0em\" rspace=\"0em\">†</mo></msup><mi>r</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd class=\"mtr-glue\"></mtd><mtd class=\"mml-eqn-num\"></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{align}\n    x_{n+1} = x_{n} - H^{-1}\\nabla f(x_{n}) = x_{n} - J^{\\dagger}r(x)\n\\end{align}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.5591em;vertical-align:-0.5296em;\"></span><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0296em;\"><span style=\"top:-3.1304em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord\">∇</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">†</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5296em;\"><span></span></span></span></span></span></span></span><span class=\"tag\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0296em;\"><span style=\"top:-3.0296em;\"><span class=\"pstrut\" style=\"height:2.8991em;\"></span><span class=\"eqn-num\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5296em;\"><span></span></span></span></span></span></span></span></span></div>\n<p>In the thesis, they also provides a pseudocode to use.</p>\n<pre class=\"language-latex\"><code class=\"language-latex code-highlight\"><span class=\"code-line\">goal_pose = y\n</span><span class=\"code-line\">q = current joint angles\n</span><span class=\"code-line\">step_size = desired step size\n</span><span class=\"code-line\">tolerance = set tolerance\n</span><span class=\"code-line\">e = goal_pose - current_pose\n</span><span class=\"code-line\">while norm(e) >= tolerance do\n</span><span class=\"code-line\">    J = Jacobian(q)\n</span><span class=\"code-line\">    J_T = J.transpose()\n</span><span class=\"code-line\">    J_pinv = (J_T * J).inv() * J_T\n</span><span class=\"code-line\">    delta_q = J_pinv * e\n</span><span class=\"code-line\">    q += step_size * delta_q\n</span><span class=\"code-line\">    q = check_joint_limits(q)\n</span><span class=\"code-line\">    e = goal_pose - ForwardKinematics(q)\n</span><span class=\"code-line\">end while\n</span></code></pre>\n<h3 id=\"gradient-descent\">Gradient Descent</h3>\n<p>The gradient descent method, also known as the <strong>Jacobian transpose method</strong>, is\nanother numerical approach to solving the inverse kinematics optimization\nproblem. This method solves the problem by iteratively adjusting the joint\nangles to reduce the error between the desired and actual end-effector position.</p>\n<p>In order to obtain the joint angles, the gradient descent method utilizes the\ntranspose of the Jacobian matrix to map the difference between the actual and\ndesired end-effector positions to the angles of the joints [2]. This is\nachieved by calculating the gradient using equation (3)</p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right\" columnspacing=\"\"><mtr><mtd class=\"mtr-glue\"></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><msub><mi>x</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>x</mi><mi>x</mi></msub><mo>−</mo><mi>α</mi><mi mathvariant=\"normal\">∇</mi><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>x</mi><mi>n</mi></msub><mo>−</mo><mi>α</mi><msup><mi>J</mi><mi>T</mi></msup><mi>r</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd class=\"mtr-glue\"></mtd><mtd class=\"mml-eqn-num\"></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{align}\n    x_{n+1} = x_{x} - \\alpha \\nabla f(x_{n}) = x_{n} - \\alpha J^{T}r(x)\n\\end{align}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.5513em;vertical-align:-0.5257em;\"></span><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0257em;\"><span style=\"top:-3.1343em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mord\">∇</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5257em;\"><span></span></span></span></span></span></span></span><span class=\"tag\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0257em;\"><span style=\"top:-3.0257em;\"><span class=\"pstrut\" style=\"height:2.8913em;\"></span><span class=\"eqn-num\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5257em;\"><span></span></span></span></span></span></span></span></span></div>\n<p>Where <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span></span> is the learning rate that define the size of the step taken into\nthe direction of the steepest descent during each iteraction [2]. Also is commun\nto define this parameter by trial and error.</p>\n<pre class=\"language-latex\"><code class=\"language-latex code-highlight\"><span class=\"code-line\">goal_pose = y\n</span><span class=\"code-line\">q = current joint angles\n</span><span class=\"code-line\">step_size = desired step size\n</span><span class=\"code-line\">tolerance = set tolerance\n</span><span class=\"code-line\">e = goal_pose - current_pose\n</span><span class=\"code-line\">while norm(e) >= tolerance do\n</span><span class=\"code-line\">    J = Jacobian(q)\n</span><span class=\"code-line\">    J_T = J.transpose()\n</span><span class=\"code-line\">    gradient = alpha * J_T * e\n</span><span class=\"code-line\">    q += step_size * gradient\n</span><span class=\"code-line\">    q = check_joint_limits(q)\n</span><span class=\"code-line\">    e = goal_pose - ForwardKinematics(q)\n</span><span class=\"code-line\">end while\n</span></code></pre>\n<h3 id=\"levenberg-marquardt\">Levenberg-Marquardt</h3>\n<p>The <strong>Levenberg-Marquardt method</strong>, is a combination of <strong>Gauss-Newton</strong> and\n<strong>gradient descent</strong> using the following equation.</p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right\" columnspacing=\"\"><mtr><mtd class=\"mtr-glue\"></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><msub><mi>x</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>x</mi><mi>n</mi></msub><mo>+</mo><mo stretchy=\"false\">(</mo><msup><mi>J</mi><mi>T</mi></msup><mi>J</mi><mo>+</mo><mi>λ</mi><mi>I</mi><msup><mo stretchy=\"false\">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><msup><mi>J</mi><mi>T</mi></msup><mi>r</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd class=\"mtr-glue\"></mtd><mtd class=\"mml-eqn-num\"></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{align}\n    x_{n+1} = x_{n} + (J^{T}J + \\lambda I)^{-1}J^{T}r(x_{n})\n\\end{align}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.5513em;vertical-align:-0.5257em;\"></span><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0257em;\"><span style=\"top:-3.1343em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5257em;\"><span></span></span></span></span></span></span></span><span class=\"tag\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0257em;\"><span style=\"top:-3.0257em;\"><span class=\"pstrut\" style=\"height:2.8913em;\"></span><span class=\"eqn-num\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5257em;\"><span></span></span></span></span></span></span></span></span></div>\n<p>Where <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> represents the current value of x at the n-th iteration, <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">J</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span></span> is\nthe Jacobian matrix of the <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span></span> function, <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">r(x_{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span> denotes the residual\nvector at <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>, <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">λ</span></span></span></span></span> is a <strong>damping</strong> factor used to control the step size,\nand <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span></span> represents the identity matrix.</p>\n<p>Similar to <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span></span>, the parameter <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">λ</span></span></span></span></span> is also determined through a\nprocess of trial and error.</p>\n<pre class=\"language-latex\"><code class=\"language-latex code-highlight\"><span class=\"code-line\">goal_pose = y\n</span><span class=\"code-line\">q = current joint angles\n</span><span class=\"code-line\">step_size = desired step size\n</span><span class=\"code-line\">tolerance = set tolerance\n</span><span class=\"code-line\">e = goal_pose - current_pose\n</span><span class=\"code-line\">lambda = damping factor\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">while norm(e) >= tolerance do\n</span><span class=\"code-line\">    J = Jacobian(q)\n</span><span class=\"code-line\">    J_T = Jacobian.transpose()\n</span><span class=\"code-line\">    J_inv = (J_T * J + lambda * I).inv() * J_T\n</span><span class=\"code-line\">    delta_q = J_inv * e\n</span><span class=\"code-line\">    q += step_size * delta_q\n</span><span class=\"code-line\">    q = check_joint_limits(q)\n</span><span class=\"code-line\">    e = goal_pose - ForwardKinematics(q)\n</span><span class=\"code-line\">end while\n</span></code></pre>\n<h2 id=\"implementation\">Implementation</h2>\n<p>Seeing that they provide the pseudocode for each algorithm, I have the idea of\ntrying to re-implement these techniques in <strong>MuJoCo</strong> for practice. Let me\nexplain how I do it.</p>\n<p>First, you need to install the necessary libraries for coding. In this case,\nI decided to use the Python bindings of the\n<a href=\"https://mujoco.readthedocs.io/en/stable/python.xml\">MuJoCo library</a>.</p>\n<pre class=\"language-python\"><code class=\"language-python code-highlight\"><span class=\"code-line\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n</span><span class=\"code-line\"><span class=\"token keyword\">import</span> mujoco\n</span><span class=\"code-line\"><span class=\"token keyword\">import</span> mujoco<span class=\"token punctuation\">.</span>viewer <span class=\"token keyword\">as</span> viewer\n</span><span class=\"code-line\"><span class=\"token keyword\">import</span> mediapy <span class=\"token keyword\">as</span> media\n</span></code></pre>\n<p>Then, choose a MuJoCo robot arm model to test our inverse kinematics. In this\ncase I decided to use the UR5e robot arm from the <strong>mujoco_menangerie</strong>\n<a href=\"https://github.com/google-deepmind/mujoco_menagerie/blob/main/universal_robots_ur5e/README.md\">library</a></p>\n<pre class=\"language-python\"><code class=\"language-python code-highlight\"><span class=\"code-line\"><span class=\"token comment\">#add path</span>\n</span><span class=\"code-line\">xml <span class=\"token operator\">=</span> <span class=\"token string\">\"&#x3C;path>/mujoco_menagerie/universal_robots_ur5e/scene.xml\"</span>\n</span><span class=\"code-line\">model <span class=\"token operator\">=</span> mujoco<span class=\"token punctuation\">.</span>MjModel<span class=\"token punctuation\">.</span>from_xml_path<span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">data <span class=\"token operator\">=</span> mujoco<span class=\"token punctuation\">.</span>MjData<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">renderer <span class=\"token operator\">=</span> mujoco<span class=\"token punctuation\">.</span>Renderer<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>\n</span></code></pre>\n<p>I also created a new camera, to get a better view of the robot.</p>\n<pre class=\"language-python\"><code class=\"language-python code-highlight\"><span class=\"code-line\">camera <span class=\"token operator\">=</span> mujoco<span class=\"token punctuation\">.</span>MjvCamera<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">mujoco<span class=\"token punctuation\">.</span>mjv_defaultFreeCamera<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> camera<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">camera<span class=\"token punctuation\">.</span>distance <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n</span></code></pre>\n<p>One important thing to ensure the correctness of an algorithm is to have a\n\"test coordinate.\" To do this, I choosed the position of the joints that give\na good visualization by trial and error and use the \"<strong>wrist 3</strong>\" link, which is\nthe last piece of the robot model, as an <strong>end-effector</strong></p>\n<pre class=\"language-python\"><code class=\"language-python code-highlight\"><span class=\"code-line\"><span class=\"token comment\">#Put a position of the joints to get a test point</span>\n</span><span class=\"code-line\">pi <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>pi\n</span><span class=\"code-line\">data<span class=\"token punctuation\">.</span>qpos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>pi<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>pi<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> pi<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">*</span>pi<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">*</span>pi<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\">#Initial joint position</span>\n</span><span class=\"code-line\">qpos0 <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>qpos<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\">#Step the simulation.</span>\n</span><span class=\"code-line\">mujoco<span class=\"token punctuation\">.</span>mj_forward<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\">#Use the last piece as an \"end effector\" to get a test point in cartesian </span>\n</span><span class=\"code-line\"><span class=\"token comment\"># coordinates</span>\n</span><span class=\"code-line\">target <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">(</span><span class=\"token string\">'wrist_3_link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>xpos\n</span><span class=\"code-line\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Target =>\"</span><span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\">#Plot results</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Results\"</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">mujoco<span class=\"token punctuation\">.</span>mj_resetDataKeyframe<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">mujoco<span class=\"token punctuation\">.</span>mj_forward<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">init_point <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">(</span><span class=\"token string\">'wrist_3_link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>xpos<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">renderer<span class=\"token punctuation\">.</span>update_scene<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> camera<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">target_plot <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">data<span class=\"token punctuation\">.</span>qpos <span class=\"token operator\">=</span> qpos0\n</span><span class=\"code-line\">mujoco<span class=\"token punctuation\">.</span>mj_forward<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">result_point <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">(</span><span class=\"token string\">'wrist_3_link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>xpos<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">renderer<span class=\"token punctuation\">.</span>update_scene<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> camera<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">result_plot <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"initial point =>\"</span><span class=\"token punctuation\">,</span> init_point<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Desire point =>\"</span><span class=\"token punctuation\">,</span> result_point<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">images <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token string\">'Initial position'</span><span class=\"token punctuation\">:</span> target_plot<span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token string\">' Desire end effector position'</span><span class=\"token punctuation\">:</span> result_plot<span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">media<span class=\"token punctuation\">.</span>show_images<span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">)</span>\n</span></code></pre>\n<p>And this is what I've got.</p>\n<p><img src=\"/images/test_point.png\" alt=\"test coordinate\"></p>\n<p>Now let's create the algorithms.</p>\n<p>As you can see in the pseudocode, there is something similar among all of them,\nwhich is that they all use the <strong>Jacobian</strong>. Fortunately, MuJoCo provides a method\nthat allows us to calculate the Jacobian without having to do it manually,\nwhich is called <a href=\"https://mujoco.readthedocs.io/en/stable/APIreference/APIfunctions.html?highlight=mj_jac#mj-jac\"><strong>mj_jac</strong></a>.\nIt can be a big help in creating these algorithms.</p>\n<p>I created a class for the different algorithms to make their use simpler. In\nthis class, I defined the <strong>check_joint_limits</strong> method in the pseudocode and the\n<strong>calculate</strong> method, where I implemented the algorithm using the MuJoCo library and\nNumPy.</p>\n<p>After implementing the algorithms, I initialized the variables for each one.\nThese values change a lot depending on the distance from the starting angles,\nso I determined the values through the results of Anton&#x26;Oskar thesis and trial\nand error to find what works best. However, if you want to experiment with the\nparameters, feel free to do so. Finally, I rendered the model and checked if it\nworks.</p>\n<h3 id=\"gradient-descent\">Gradient descent</h3>\n<pre class=\"language-python\"><code class=\"language-python code-highlight\"><span class=\"code-line\"><span class=\"token comment\"># Gradient Descent method</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GradientDescentIK</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">    \n</span><span class=\"code-line\">    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> step_size<span class=\"token punctuation\">,</span> tol<span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">,</span> jacp<span class=\"token punctuation\">,</span> jacr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>step_size <span class=\"token operator\">=</span> step_size\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>tol <span class=\"token operator\">=</span> tol\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">=</span> alpha\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>jacp <span class=\"token operator\">=</span> jacp\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>jacr <span class=\"token operator\">=</span> jacr\n</span><span class=\"code-line\">    \n</span><span class=\"code-line\">    <span class=\"token keyword\">def</span> <span class=\"token function\">check_joint_limits</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">        <span class=\"token triple-quoted-string string\">\"\"\"Check if the joints is under or above its limits\"\"\"</span>\n</span><span class=\"code-line\">        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">            q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>jnt_range<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n</span><span class=\"code-line\">                       <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>jnt_range<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">    <span class=\"token comment\">#Gradient Descent pseudocode implementation</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">def</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> goal<span class=\"token punctuation\">,</span> init_q<span class=\"token punctuation\">,</span> body_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">        <span class=\"token triple-quoted-string string\">\"\"\"Calculate the desire joints angles for goal\"\"\"</span>\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>qpos <span class=\"token operator\">=</span> init_q\n</span><span class=\"code-line\">        mujoco<span class=\"token punctuation\">.</span>mj_forward<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">        current_pose <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">(</span>body_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>xpos\n</span><span class=\"code-line\">        error <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>subtract<span class=\"token punctuation\">(</span>goal<span class=\"token punctuation\">,</span> current_pose<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>linalg<span class=\"token punctuation\">.</span>norm<span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>tol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">            <span class=\"token comment\">#calculate jacobian</span>\n</span><span class=\"code-line\">            mujoco<span class=\"token punctuation\">.</span>mj_jac<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>jacp<span class=\"token punctuation\">,</span> \n</span><span class=\"code-line\">                          self<span class=\"token punctuation\">.</span>jacr<span class=\"token punctuation\">,</span> goal<span class=\"token punctuation\">,</span> body_id<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">            <span class=\"token comment\">#calculate gradient</span>\n</span><span class=\"code-line\">            grad <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>jacp<span class=\"token punctuation\">.</span>T @ error\n</span><span class=\"code-line\">            <span class=\"token comment\">#compute next step</span>\n</span><span class=\"code-line\">            self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>qpos <span class=\"token operator\">+=</span> self<span class=\"token punctuation\">.</span>step_size <span class=\"token operator\">*</span> grad\n</span><span class=\"code-line\">            <span class=\"token comment\">#check joint limits</span>\n</span><span class=\"code-line\">            self<span class=\"token punctuation\">.</span>check_joint_limits<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>qpos<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">            <span class=\"token comment\">#compute forward kinematics</span>\n</span><span class=\"code-line\">            mujoco<span class=\"token punctuation\">.</span>mj_forward<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> \n</span><span class=\"code-line\">            <span class=\"token comment\">#calculate new error</span>\n</span><span class=\"code-line\">            error <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>subtract<span class=\"token punctuation\">(</span>goal<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">(</span>body_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>xpos<span class=\"token punctuation\">)</span>  \n</span></code></pre>\n<pre class=\"language-python\"><code class=\"language-python code-highlight\"><span class=\"code-line\"><span class=\"token comment\">#Init variables.</span>\n</span><span class=\"code-line\">body_id <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">(</span><span class=\"token string\">'wrist_3_link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span>\n</span><span class=\"code-line\">jacp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">.</span>nv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#translation jacobian</span>\n</span><span class=\"code-line\">jacr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">.</span>nv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#rotational jacobian</span>\n</span><span class=\"code-line\">goal <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.49</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.59</span><span class=\"token punctuation\">]</span>\n</span><span class=\"code-line\">step_size <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span>\n</span><span class=\"code-line\">tol <span class=\"token operator\">=</span> <span class=\"token number\">0.01</span>\n</span><span class=\"code-line\">alpha <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span>\n</span><span class=\"code-line\">init_q <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">]</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">ik <span class=\"token operator\">=</span> GradientDescentIK<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> step_size<span class=\"token punctuation\">,</span> tol<span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">,</span> jacp<span class=\"token punctuation\">,</span> jacr<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\">#Get desire point</span>\n</span><span class=\"code-line\">mujoco<span class=\"token punctuation\">.</span>mj_resetDataKeyframe<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#reset qpos to initial value</span>\n</span><span class=\"code-line\">ik<span class=\"token punctuation\">.</span>calculate<span class=\"token punctuation\">(</span>goal<span class=\"token punctuation\">,</span> init_q<span class=\"token punctuation\">,</span> body_id<span class=\"token punctuation\">)</span> <span class=\"token comment\">#calculate the q angles</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">result <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>qpos<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\">#Plot results</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Results\"</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">data<span class=\"token punctuation\">.</span>qpos <span class=\"token operator\">=</span> qpos0\n</span><span class=\"code-line\">mujoco<span class=\"token punctuation\">.</span>mj_forward<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">renderer<span class=\"token punctuation\">.</span>update_scene<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> camera<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">target_plot <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">data<span class=\"token punctuation\">.</span>qpos <span class=\"token operator\">=</span> result\n</span><span class=\"code-line\">mujoco<span class=\"token punctuation\">.</span>mj_forward<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">result_point <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">(</span><span class=\"token string\">'wrist_3_link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>xpos\n</span><span class=\"code-line\">renderer<span class=\"token punctuation\">.</span>update_scene<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> camera<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">result_plot <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testing point =>\"</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Gradient Descent result =>\"</span><span class=\"token punctuation\">,</span> result_point<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">images <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token string\">'Testing point'</span><span class=\"token punctuation\">:</span> target_plot<span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token string\">'Gradient Descent result'</span><span class=\"token punctuation\">:</span> result_plot<span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">media<span class=\"token punctuation\">.</span>show_images<span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">)</span>\n</span></code></pre>\n<p><img src=\"/images/gdresult.png\" alt=\"gd-result-render\" title=\"Gradient Descent result\"></p>\n<h3 id=\"gauss-newton\">Gauss-Newton</h3>\n<pre class=\"language-python\"><code class=\"language-python code-highlight\"><span class=\"code-line\"><span class=\"token comment\"># Gauss-Newton method</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GaussNewtonIK</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">    \n</span><span class=\"code-line\">    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> step_size<span class=\"token punctuation\">,</span> tol<span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">,</span> jacp<span class=\"token punctuation\">,</span> jacr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>step_size <span class=\"token operator\">=</span> step_size\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>tol <span class=\"token operator\">=</span> tol\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">=</span> alpha\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>jacp <span class=\"token operator\">=</span> jacp\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>jacr <span class=\"token operator\">=</span> jacr\n</span><span class=\"code-line\">    \n</span><span class=\"code-line\">    <span class=\"token keyword\">def</span> <span class=\"token function\">check_joint_limits</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">        <span class=\"token triple-quoted-string string\">\"\"\"Check if the joints is under or above its limits\"\"\"</span>\n</span><span class=\"code-line\">        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">            q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>jnt_range<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n</span><span class=\"code-line\">                       <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>jnt_range<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">    \n</span><span class=\"code-line\">    <span class=\"token comment\"># Gauss-Newton pseudocode implementation</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">def</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> goal<span class=\"token punctuation\">,</span> init_q<span class=\"token punctuation\">,</span> body_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">        <span class=\"token triple-quoted-string string\">\"\"\"Calculate the desire joints angles for goal\"\"\"</span>\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>qpos <span class=\"token operator\">=</span> init_q\n</span><span class=\"code-line\">        mujoco<span class=\"token punctuation\">.</span>mj_forward<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">        current_pose <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">(</span>body_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>xpos\n</span><span class=\"code-line\">        error <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>subtract<span class=\"token punctuation\">(</span>goal<span class=\"token punctuation\">,</span> current_pose<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>linalg<span class=\"token punctuation\">.</span>norm<span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>tol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">            <span class=\"token comment\">#calculate jacobian</span>\n</span><span class=\"code-line\">            mujoco<span class=\"token punctuation\">.</span>mj_jac<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>jacp<span class=\"token punctuation\">,</span> \n</span><span class=\"code-line\">                          self<span class=\"token punctuation\">.</span>jacr<span class=\"token punctuation\">,</span> goal<span class=\"token punctuation\">,</span> body_id<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">            <span class=\"token comment\">#calculate delta of joint q</span>\n</span><span class=\"code-line\">            product <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>jacp<span class=\"token punctuation\">.</span>T @ self<span class=\"token punctuation\">.</span>jacp\n</span><span class=\"code-line\">            \n</span><span class=\"code-line\">            <span class=\"token keyword\">if</span> np<span class=\"token punctuation\">.</span>isclose<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>linalg<span class=\"token punctuation\">.</span>det<span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">                j_inv <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linalg<span class=\"token punctuation\">.</span>pinv<span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span> @ self<span class=\"token punctuation\">.</span>jacp<span class=\"token punctuation\">.</span>T\n</span><span class=\"code-line\">            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">                j_inv <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linalg<span class=\"token punctuation\">.</span>inv<span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span> @ self<span class=\"token punctuation\">.</span>jacp<span class=\"token punctuation\">.</span>T\n</span><span class=\"code-line\">            \n</span><span class=\"code-line\">            delta_q <span class=\"token operator\">=</span> j_inv @ error\n</span><span class=\"code-line\">            <span class=\"token comment\">#compute next step</span>\n</span><span class=\"code-line\">            self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>qpos <span class=\"token operator\">+=</span> self<span class=\"token punctuation\">.</span>step_size <span class=\"token operator\">*</span> delta_q\n</span><span class=\"code-line\">            <span class=\"token comment\">#check limits</span>\n</span><span class=\"code-line\">            self<span class=\"token punctuation\">.</span>check_joint_limits<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>qpos<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">            <span class=\"token comment\">#compute forward kinematics</span>\n</span><span class=\"code-line\">            mujoco<span class=\"token punctuation\">.</span>mj_forward<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> \n</span><span class=\"code-line\">            <span class=\"token comment\">#calculate new error</span>\n</span><span class=\"code-line\">            error <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>subtract<span class=\"token punctuation\">(</span>goal<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">(</span>body_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>xpos<span class=\"token punctuation\">)</span> \n</span></code></pre>\n<pre class=\"language-python\"><code class=\"language-python code-highlight\"><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\">#Init variables.</span>\n</span><span class=\"code-line\">body_id <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">(</span><span class=\"token string\">'wrist_3_link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span>\n</span><span class=\"code-line\">jacp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">.</span>nv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#translation jacobian</span>\n</span><span class=\"code-line\">jacr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">.</span>nv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#rotational jacobian</span>\n</span><span class=\"code-line\">goal <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.49</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.59</span><span class=\"token punctuation\">]</span>\n</span><span class=\"code-line\">step_size <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span>\n</span><span class=\"code-line\">tol <span class=\"token operator\">=</span> <span class=\"token number\">0.01</span>\n</span><span class=\"code-line\">alpha <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span>\n</span><span class=\"code-line\">init_q <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">]</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">ik <span class=\"token operator\">=</span> GaussNewtonIK<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> step_size<span class=\"token punctuation\">,</span> tol<span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">,</span> jacp<span class=\"token punctuation\">,</span> jacr<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\">#Get desire point</span>\n</span><span class=\"code-line\">mujoco<span class=\"token punctuation\">.</span>mj_resetDataKeyframe<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#reset qpos to initial value</span>\n</span><span class=\"code-line\">ik<span class=\"token punctuation\">.</span>calculate<span class=\"token punctuation\">(</span>goal<span class=\"token punctuation\">,</span> init_q<span class=\"token punctuation\">,</span> body_id<span class=\"token punctuation\">)</span> <span class=\"token comment\">#calculate the qpos</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">result <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>qpos<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\">#Plot results</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Results\"</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">data<span class=\"token punctuation\">.</span>qpos <span class=\"token operator\">=</span> qpos0\n</span><span class=\"code-line\">mujoco<span class=\"token punctuation\">.</span>mj_forward<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">renderer<span class=\"token punctuation\">.</span>update_scene<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> camera<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">target_plot <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">data<span class=\"token punctuation\">.</span>qpos <span class=\"token operator\">=</span> result\n</span><span class=\"code-line\">mujoco<span class=\"token punctuation\">.</span>mj_forward<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">result_point <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">(</span><span class=\"token string\">'wrist_3_link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>xpos\n</span><span class=\"code-line\">renderer<span class=\"token punctuation\">.</span>update_scene<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> camera<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">result_plot <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testing point =>\"</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Gauss-Newton result =>\"</span><span class=\"token punctuation\">,</span> result_point<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">images <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token string\">'Testing point'</span><span class=\"token punctuation\">:</span> target_plot<span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token string\">'Gauss-Newton result'</span><span class=\"token punctuation\">:</span> result_plot<span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">media<span class=\"token punctuation\">.</span>show_images<span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">)</span>\n</span></code></pre>\n<p><img src=\"/images/gnresult.png\" alt=\"gn-result-render\" title=\"Gradient Descent result\"></p>\n<h3 id=\"levenberg-marquardt\">Levenberg-Marquardt</h3>\n<pre class=\"language-python\"><code class=\"language-python code-highlight\"><span class=\"code-line\"><span class=\"token comment\">#Levenberg-Marquardt method</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LevenbegMarquardtIK</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">    \n</span><span class=\"code-line\">    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> step_size<span class=\"token punctuation\">,</span> tol<span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">,</span> jacp<span class=\"token punctuation\">,</span> jacr<span class=\"token punctuation\">,</span> damping<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>step_size <span class=\"token operator\">=</span> step_size\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>tol <span class=\"token operator\">=</span> tol\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>alpha <span class=\"token operator\">=</span> alpha\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>jacp <span class=\"token operator\">=</span> jacp\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>jacr <span class=\"token operator\">=</span> jacr\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>damping <span class=\"token operator\">=</span> damping\n</span><span class=\"code-line\">    \n</span><span class=\"code-line\">    <span class=\"token keyword\">def</span> <span class=\"token function\">check_joint_limits</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">        <span class=\"token triple-quoted-string string\">\"\"\"Check if the joints is under or above its limits\"\"\"</span>\n</span><span class=\"code-line\">        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">            q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>jnt_range<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n</span><span class=\"code-line\">                       <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>jnt_range<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">    <span class=\"token comment\">#Levenberg-Marquardt pseudocode implementation</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">def</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> goal<span class=\"token punctuation\">,</span> init_q<span class=\"token punctuation\">,</span> body_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">        <span class=\"token triple-quoted-string string\">\"\"\"Calculate the desire joints angles for goal\"\"\"</span>\n</span><span class=\"code-line\">        self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>qpos <span class=\"token operator\">=</span> init_q\n</span><span class=\"code-line\">        mujoco<span class=\"token punctuation\">.</span>mj_forward<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">        current_pose <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">(</span>body_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>xpos\n</span><span class=\"code-line\">        error <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>subtract<span class=\"token punctuation\">(</span>goal<span class=\"token punctuation\">,</span> current_pose<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>linalg<span class=\"token punctuation\">.</span>norm<span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>tol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">            <span class=\"token comment\">#calculate jacobian</span>\n</span><span class=\"code-line\">            mujoco<span class=\"token punctuation\">.</span>mj_jac<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>jacp<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>jacr<span class=\"token punctuation\">,</span> goal<span class=\"token punctuation\">,</span> body_id<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">            <span class=\"token comment\">#calculate delta of joint q</span>\n</span><span class=\"code-line\">            n <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>jacp<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n</span><span class=\"code-line\">            I <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">            product <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>jacp<span class=\"token punctuation\">.</span>T @ self<span class=\"token punctuation\">.</span>jacp <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>damping <span class=\"token operator\">*</span> I\n</span><span class=\"code-line\">            \n</span><span class=\"code-line\">            <span class=\"token keyword\">if</span> np<span class=\"token punctuation\">.</span>isclose<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>linalg<span class=\"token punctuation\">.</span>det<span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">                j_inv <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linalg<span class=\"token punctuation\">.</span>pinv<span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span> @ self<span class=\"token punctuation\">.</span>jacp<span class=\"token punctuation\">.</span>T\n</span><span class=\"code-line\">            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">                j_inv <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linalg<span class=\"token punctuation\">.</span>inv<span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span> @ self<span class=\"token punctuation\">.</span>jacp<span class=\"token punctuation\">.</span>T\n</span><span class=\"code-line\">            \n</span><span class=\"code-line\">            delta_q <span class=\"token operator\">=</span> j_inv @ error\n</span><span class=\"code-line\">            <span class=\"token comment\">#compute next step</span>\n</span><span class=\"code-line\">            self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>qpos <span class=\"token operator\">+=</span> self<span class=\"token punctuation\">.</span>step_size <span class=\"token operator\">*</span> delta_q\n</span><span class=\"code-line\">            <span class=\"token comment\">#check limits</span>\n</span><span class=\"code-line\">            self<span class=\"token punctuation\">.</span>check_joint_limits<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>qpos<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">            <span class=\"token comment\">#compute forward kinematics</span>\n</span><span class=\"code-line\">            mujoco<span class=\"token punctuation\">.</span>mj_forward<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> \n</span><span class=\"code-line\">            <span class=\"token comment\">#calculate new error</span>\n</span><span class=\"code-line\">            error <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>subtract<span class=\"token punctuation\">(</span>goal<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">(</span>body_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>xpos<span class=\"token punctuation\">)</span>  \n</span></code></pre>\n<pre class=\"language-python\"><code class=\"language-python code-highlight\"><span class=\"code-line\"><span class=\"token comment\">#Init variables.</span>\n</span><span class=\"code-line\">body_id <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">(</span><span class=\"token string\">'wrist_3_link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span>\n</span><span class=\"code-line\">jacp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">.</span>nv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#translation jacobian</span>\n</span><span class=\"code-line\">jacr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">.</span>nv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#rotational jacobian</span>\n</span><span class=\"code-line\">goal <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.49</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.59</span><span class=\"token punctuation\">]</span>\n</span><span class=\"code-line\">step_size <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span>\n</span><span class=\"code-line\">tol <span class=\"token operator\">=</span> <span class=\"token number\">0.01</span>\n</span><span class=\"code-line\">alpha <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span>\n</span><span class=\"code-line\">init_q <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">]</span>\n</span><span class=\"code-line\">damping <span class=\"token operator\">=</span> <span class=\"token number\">0.15</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">ik <span class=\"token operator\">=</span> LevenbegMarquardtIK<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> step_size<span class=\"token punctuation\">,</span> tol<span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">,</span> jacp<span class=\"token punctuation\">,</span> jacr<span class=\"token punctuation\">,</span> damping<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\">#Get desire point</span>\n</span><span class=\"code-line\">mujoco<span class=\"token punctuation\">.</span>mj_resetDataKeyframe<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#reset qpos to initial value</span>\n</span><span class=\"code-line\">ik<span class=\"token punctuation\">.</span>calculate<span class=\"token punctuation\">(</span>goal<span class=\"token punctuation\">,</span> init_q<span class=\"token punctuation\">,</span> body_id<span class=\"token punctuation\">)</span> <span class=\"token comment\">#calculate the qpos</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">result <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>qpos<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\">#Plot results</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Results\"</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">data<span class=\"token punctuation\">.</span>qpos <span class=\"token operator\">=</span> qpos0\n</span><span class=\"code-line\">mujoco<span class=\"token punctuation\">.</span>mj_forward<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">renderer<span class=\"token punctuation\">.</span>update_scene<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> camera<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">target_plot <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">data<span class=\"token punctuation\">.</span>qpos <span class=\"token operator\">=</span> result\n</span><span class=\"code-line\">mujoco<span class=\"token punctuation\">.</span>mj_forward<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">result_point <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">(</span><span class=\"token string\">'wrist_3_link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>xpos\n</span><span class=\"code-line\">renderer<span class=\"token punctuation\">.</span>update_scene<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> camera<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">result_plot <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testing point =>\"</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Levenberg-Marquardt result =>\"</span><span class=\"token punctuation\">,</span> result_point<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">images <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"code-line\">    <span class=\"token string\">'Testing point'</span><span class=\"token punctuation\">:</span> target_plot<span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\">    <span class=\"token string\">'Levenberg-Marquardt result'</span><span class=\"token punctuation\">:</span> result_plot<span class=\"token punctuation\">,</span>\n</span><span class=\"code-line\"><span class=\"token punctuation\">}</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">media<span class=\"token punctuation\">.</span>show_images<span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">)</span>\n</span></code></pre>\n<p><img src=\"/images/lkresult.png\" alt=\"lk-result-render\" title=\"Gradient Descent result\"></p>\n<h2 id=\"simulation\">Simulation</h2>\n<p>Let's try to simulate this movement. To understand how to implement it, I based\non the <a href=\"https://github.com/kevinzakka/mjctrl\">mjctrl</a> repository from Kevin Zakka,\nwhere he explains clear and pedagogical implementations of robotics controllers,\nand by referencing the Mujoco\n<a href=\"https://github.com/google-deepmind/mujoco?tab=readme-ov-file#getting-started\">colab</a>\nexamples to render the simulations.</p>\n<p>I implemented this code in a Jupyter notebook, and to visualize my robot, I\nrender a video of it. First, I set up the video parameters so that the video\ncan run for 4 seconds.</p>\n<pre class=\"language-python\"><code class=\"language-python code-highlight\"><span class=\"code-line\"><span class=\"token comment\">#Video setup</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">import</span> mediapy <span class=\"token keyword\">as</span> media\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">DURATION <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token comment\">#(seconds)</span>\n</span><span class=\"code-line\">FRAMERATE <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token comment\">#(Hz)</span>\n</span><span class=\"code-line\">frames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n</span></code></pre>\n<p>Then, I reset the model data, initialize the parameters, and obtain the initial\nerror for the simulation. In this case, I used the <strong>Levenberg-Marquardt</strong> method.</p>\n<pre class=\"language-python\"><code class=\"language-python code-highlight\"><span class=\"code-line\"><span class=\"token comment\">#Reset state and time</span>\n</span><span class=\"code-line\">mujoco<span class=\"token punctuation\">.</span>mj_resetData<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\">#Init parameters</span>\n</span><span class=\"code-line\">jacp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">.</span>nv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#translation jacobian</span>\n</span><span class=\"code-line\">jacr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">.</span>nv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#rotational jacobian</span>\n</span><span class=\"code-line\">step_size <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span>\n</span><span class=\"code-line\">tol <span class=\"token operator\">=</span> <span class=\"token number\">0.01</span>\n</span><span class=\"code-line\">alpha <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span>\n</span><span class=\"code-line\">damping <span class=\"token operator\">=</span> <span class=\"token number\">0.15</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\">#Get error.</span>\n</span><span class=\"code-line\">end_effector_id <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">(</span><span class=\"token string\">'wrist_3_link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token comment\">#\"End-effector we wish to control.</span>\n</span><span class=\"code-line\">current_pose <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">(</span>end_effector_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>xpos <span class=\"token comment\">#Current pose</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">goal <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.49</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.59</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#Desire position</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">error <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>subtract<span class=\"token punctuation\">(</span>goal<span class=\"token punctuation\">,</span> current_pose<span class=\"token punctuation\">)</span> <span class=\"token comment\">#Init Error</span>\n</span></code></pre>\n<p>I implemented the algorithm into a loop during the \"DURATION\" of the video,\ncalculating and updating inverse kinematics on each step frame. The difference\nbetween this simulation and the last class implementations is the <strong>mj_step</strong>\nmethod, which integrates in time and advances the simulation, applying forward\nkinematics. Finally, I rendered and saved frames and displayed them using the\n<strong>MediaPy library</strong>.</p>\n<pre class=\"language-python\"><code class=\"language-python code-highlight\"><span class=\"code-line\"><span class=\"token comment\">#Simulate</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">while</span> data<span class=\"token punctuation\">.</span>time <span class=\"token operator\">&#x3C;</span> DURATION<span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">       \n</span><span class=\"code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>linalg<span class=\"token punctuation\">.</span>norm<span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> tol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">        <span class=\"token comment\">#Calculate jacobian</span>\n</span><span class=\"code-line\">        mujoco<span class=\"token punctuation\">.</span>mj_jac<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> jacp<span class=\"token punctuation\">,</span> jacr<span class=\"token punctuation\">,</span> goal<span class=\"token punctuation\">,</span> end_effector_id<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">        <span class=\"token comment\">#Calculate delta of joint q</span>\n</span><span class=\"code-line\">        n <span class=\"token operator\">=</span> jacp<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n</span><span class=\"code-line\">        I <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">        product <span class=\"token operator\">=</span> jacp<span class=\"token punctuation\">.</span>T @ jacp <span class=\"token operator\">+</span> damping <span class=\"token operator\">*</span> I\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">        <span class=\"token keyword\">if</span> np<span class=\"token punctuation\">.</span>isclose<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>linalg<span class=\"token punctuation\">.</span>det<span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">            j_inv <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linalg<span class=\"token punctuation\">.</span>pinv<span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span> @ jacp<span class=\"token punctuation\">.</span>T\n</span><span class=\"code-line\">        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">            j_inv <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linalg<span class=\"token punctuation\">.</span>inv<span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span> @ jacp<span class=\"token punctuation\">.</span>T\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">        delta_q <span class=\"token operator\">=</span> j_inv @ error\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">        <span class=\"token comment\">#Compute next step</span>\n</span><span class=\"code-line\">        q <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>qpos<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">        q <span class=\"token operator\">+=</span> step_size <span class=\"token operator\">*</span> delta_q\n</span><span class=\"code-line\">        \n</span><span class=\"code-line\">        <span class=\"token comment\">#Check limits</span>\n</span><span class=\"code-line\">        check_joint_limits<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>qpos<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">        \n</span><span class=\"code-line\">        <span class=\"token comment\">#Set control signal</span>\n</span><span class=\"code-line\">        data<span class=\"token punctuation\">.</span>ctrl <span class=\"token operator\">=</span> q\n</span><span class=\"code-line\">        <span class=\"token comment\">#Step the simulation.</span>\n</span><span class=\"code-line\">        mujoco<span class=\"token punctuation\">.</span>mj_step<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">        error <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>subtract<span class=\"token punctuation\">(</span>goal<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">(</span>end_effector_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>xpos<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">    \n</span><span class=\"code-line\">    <span class=\"token comment\">#Render and save frames.</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>frames<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> data<span class=\"token punctuation\">.</span>time <span class=\"token operator\">*</span> FRAMERATE<span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">        renderer<span class=\"token punctuation\">.</span>update_scene<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">        pixels <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">        frames<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">        \n</span><span class=\"code-line\"><span class=\"token comment\">#Display video.</span>\n</span><span class=\"code-line\">media<span class=\"token punctuation\">.</span>show_video<span class=\"token punctuation\">(</span>frames<span class=\"token punctuation\">,</span> fps<span class=\"token operator\">=</span>FRAMERATE<span class=\"token punctuation\">)</span>\n</span></code></pre>\n<p>And this was the final result.</p>\n<p><img src=\"/images/robot.gif\" alt=\"robot\"></p>\n<p>From here you can implement a lot of stuff, like creating a circle similar to\n<strong>mjctrl</strong> examples.</p>\n<p><img src=\"/images/robotCircle.gif\" alt=\"robot circle\"></p>\n<p>Here is a full code implementation.</p>\n<pre class=\"language-python\"><code class=\"language-python code-highlight\"><span class=\"code-line\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n</span><span class=\"code-line\"><span class=\"token keyword\">import</span> mujoco\n</span><span class=\"code-line\"><span class=\"token keyword\">import</span> mujoco<span class=\"token punctuation\">.</span>viewer <span class=\"token keyword\">as</span> viewer\n</span><span class=\"code-line\"><span class=\"token keyword\">import</span> mediapy <span class=\"token keyword\">as</span> media\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\">#Video Setup</span>\n</span><span class=\"code-line\">DURATION <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token comment\">#(seconds)</span>\n</span><span class=\"code-line\">FRAMERATE <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token comment\">#(Hz)</span>\n</span><span class=\"code-line\">frames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\">#Reset state and time.</span>\n</span><span class=\"code-line\">mujoco<span class=\"token punctuation\">.</span>mj_resetData<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\">#Init position.</span>\n</span><span class=\"code-line\"><span class=\"token comment\"># pi = np.pi</span>\n</span><span class=\"code-line\"><span class=\"token comment\"># data.qpos = [3*pi/2, -pi/2, pi/2, 3*pi/2, 3*pi/2, 0] #ENABLE if you want test circle</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\">#Init parameters</span>\n</span><span class=\"code-line\">jacp <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">.</span>nv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#translation jacobian</span>\n</span><span class=\"code-line\">jacr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">.</span>nv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#rotational jacobian</span>\n</span><span class=\"code-line\">step_size <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span>\n</span><span class=\"code-line\">tol <span class=\"token operator\">=</span> <span class=\"token number\">0.01</span>\n</span><span class=\"code-line\">alpha <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span>\n</span><span class=\"code-line\">damping <span class=\"token operator\">=</span> <span class=\"token number\">0.15</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\">#Get error.</span>\n</span><span class=\"code-line\">end_effector_id <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">(</span><span class=\"token string\">'wrist_3_link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token comment\">#\"End-effector we wish to control.</span>\n</span><span class=\"code-line\">current_pose <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">(</span>end_effector_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>xpos <span class=\"token comment\">#Current pose</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">goal <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.49</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.59</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#Desire position</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">error <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>subtract<span class=\"token punctuation\">(</span>goal<span class=\"token punctuation\">,</span> current_pose<span class=\"token punctuation\">)</span> <span class=\"token comment\">#Init Error</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">check_joint_limits</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">    <span class=\"token triple-quoted-string string\">\"\"\"Check if the joints is under or above its limits\"\"\"</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">        q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>jnt_range<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">.</span>jnt_range<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">circle</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> np<span class=\"token punctuation\">.</span>ndarray<span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">    <span class=\"token triple-quoted-string string\">\"\"\"Return the (x, y) coordinates of a circle with radius r centered at (h, k)\n</span></span><span class=\"code-line\"><span class=\"token triple-quoted-string string\">    as a function of time t and frequency f.\"\"\"</span>\n</span><span class=\"code-line\">    x <span class=\"token operator\">=</span> r <span class=\"token operator\">*</span> np<span class=\"token punctuation\">.</span>cos<span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> np<span class=\"token punctuation\">.</span>pi <span class=\"token operator\">*</span> f <span class=\"token operator\">*</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> h\n</span><span class=\"code-line\">    y <span class=\"token operator\">=</span> r <span class=\"token operator\">*</span> np<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> np<span class=\"token punctuation\">.</span>pi <span class=\"token operator\">*</span> f <span class=\"token operator\">*</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> k\n</span><span class=\"code-line\">    z <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\"><span class=\"token comment\">#Simulate</span>\n</span><span class=\"code-line\"><span class=\"token keyword\">while</span> data<span class=\"token punctuation\">.</span>time <span class=\"token operator\">&#x3C;</span> DURATION<span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">    \n</span><span class=\"code-line\">    <span class=\"token comment\"># goal = circle(data.time, 0.1, 0.5, 0.0, 0.5) #ENABLE to test circle.</span>\n</span><span class=\"code-line\">    \n</span><span class=\"code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>linalg<span class=\"token punctuation\">.</span>norm<span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> tol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">        <span class=\"token comment\">#Calculate jacobian</span>\n</span><span class=\"code-line\">        mujoco<span class=\"token punctuation\">.</span>mj_jac<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> jacp<span class=\"token punctuation\">,</span> jacr<span class=\"token punctuation\">,</span> goal<span class=\"token punctuation\">,</span> end_effector_id<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">        <span class=\"token comment\">#Calculate delta of joint q</span>\n</span><span class=\"code-line\">        n <span class=\"token operator\">=</span> jacp<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n</span><span class=\"code-line\">        I <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">        product <span class=\"token operator\">=</span> jacp<span class=\"token punctuation\">.</span>T @ jacp <span class=\"token operator\">+</span> damping <span class=\"token operator\">*</span> I\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">        <span class=\"token keyword\">if</span> np<span class=\"token punctuation\">.</span>isclose<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>linalg<span class=\"token punctuation\">.</span>det<span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">            j_inv <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linalg<span class=\"token punctuation\">.</span>pinv<span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span> @ jacp<span class=\"token punctuation\">.</span>T\n</span><span class=\"code-line\">        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">            j_inv <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linalg<span class=\"token punctuation\">.</span>inv<span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span> @ jacp<span class=\"token punctuation\">.</span>T\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">        delta_q <span class=\"token operator\">=</span> j_inv @ error\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">        <span class=\"token comment\">#Compute next step</span>\n</span><span class=\"code-line\">        q <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>qpos<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">        q <span class=\"token operator\">+=</span> step_size <span class=\"token operator\">*</span> delta_q\n</span><span class=\"code-line\">        \n</span><span class=\"code-line\">        <span class=\"token comment\">#Check limits</span>\n</span><span class=\"code-line\">        check_joint_limits<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>qpos<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">        \n</span><span class=\"code-line\">        <span class=\"token comment\">#Set control signal</span>\n</span><span class=\"code-line\">        data<span class=\"token punctuation\">.</span>ctrl <span class=\"token operator\">=</span> q \n</span><span class=\"code-line\">        <span class=\"token comment\">#Step the simulation.</span>\n</span><span class=\"code-line\">        mujoco<span class=\"token punctuation\">.</span>mj_step<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">\n</span><span class=\"code-line\">        error <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>subtract<span class=\"token punctuation\">(</span>goal<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">(</span>end_effector_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>xpos<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">    \n</span><span class=\"code-line\">    <span class=\"token comment\">#Render and save frames.</span>\n</span><span class=\"code-line\">    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>frames<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> data<span class=\"token punctuation\">.</span>time <span class=\"token operator\">*</span> FRAMERATE<span class=\"token punctuation\">:</span>\n</span><span class=\"code-line\">        renderer<span class=\"token punctuation\">.</span>update_scene<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">        pixels <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">        frames<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">)</span>\n</span><span class=\"code-line\">        \n</span><span class=\"code-line\"><span class=\"token comment\">#Display video.</span>\n</span><span class=\"code-line\">media<span class=\"token punctuation\">.</span>show_video<span class=\"token punctuation\">(</span>frames<span class=\"token punctuation\">,</span> fps<span class=\"token operator\">=</span>FRAMERATE<span class=\"token punctuation\">)</span>\n</span></code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>So that's all for now! You've seen how MuJoCo can be used to implement simple\nInverse Kinematics. Keep in mind that this approach may not always produce\noptimal values for your specific needs and may not consider orientation. From\nhere, you can start experimenting with different techniques to fine-tune your\nimplementations using the libraries that I used.</p>\n<p>If you find any errors or would like to add more information, please DM me on\n<a href=\"https://twitter.com/_Alefram_\">Twitter/x</a> or send me an\n<a href=\"mailto:fraumalex@gmail.com\">email</a> to update this post. I would appreciate it.</p>\n<p>You can check the full Jupyter notebook <a href=\"https://github.com/alefram/blog-notebooks/blob/master/inverse_kinematics.ipynb\">here</a></p>\n<p>I hope this has been helpful, and don't forget to share it with anyone who\nneeds it.</p>\n<h2 id=\"reference\">Reference</h2>\n<ul>\n<li>[1] Gauss–Newton algorithm <a href=\"https://en.wikipedia.org/wiki/Gauss%E2%80%93Newton_algorithm#:~:text=The%20Gauss%E2%80%93Newton%20algorithm%20is,of%20a%20non%2Dlinear%20function.\">wikipedia</a></li>\n<li>[2] Anton Larsson and Oskar Grönlund <a href=\"https://www.diva-portal.org/smash/get/diva2:1774792/FULLTEXT01.pdf\">Comparative Analysis of the Inverse Kinematics of a 6-DOF Manipulator</a></li>\n<li>[3] Levenberg-Marquardt algorithm <a href=\"https://en.wikipedia.org/wiki/Levenberg%E2%80%93Marquardt_algorithm\">wikipedia</a></li>\n<li>[4] MuJoCo Python Bindings docs <a href=\"https://mujoco.readthedocs.io/en/stable/python.html\">Docs</a></li>\n<li>[5] mujoco_menagerie <a href=\"https://github.com/google-deepmind/mujoco_menagerie/blob/main/universal_robots_ur5e/README.md\">UR5e</a></li>\n<li>[6] kevinzakka mjctrl <a href=\"https://github.com/kevinzakka/mjctrl\">repo</a></li>\n<li>[7] Deepmind mujoco <a href=\"https://github.com/google-deepmind/mujoco\">repo</a></li>\n</ul>","title":"Basic inverse kinematics in MuJoCo","date":"2024-02-13","description":"Basic IK for Mujoco","keywords":"Robotics, Blog, Portfolio, inverse kinematics, Alexis Fraudita, Python"}},"__N_SSG":true}